Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

It is guaranteed that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
// solution :


class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int max_till_ith_index = nums[0];
        int min_till_ith_index = nums[0];
        int ans = nums[0];
        int prev_max_so_far = 0;
        for(int i=1;i<nums.size();i++)
        {   
            prev_max_so_far  = max_till_ith_index;
            max_till_ith_index = max(nums[i],max(nums[i]*prev_max_so_far,nums[i]*min_till_ith_index));
            min_till_ith_index = min(nums[i],min(nums[i]*min_till_ith_index,nums[i]*prev_max_so_far));
                                     
               ans = max(ans,max_till_ith_index);                      
                                     
        }
                                     return ans;
        }
};
